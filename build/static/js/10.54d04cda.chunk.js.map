{"version":3,"sources":["images/info-emoji.svg","components/Login/LoginModal.js","pages/Login.js"],"names":["Login","setLoggedInUser","useContext","UserContext","useState","showModal","setShowModal","newUser","setNewUser","useForm","registerSignIn","register","handleSignIn","handleSubmit","registerSignUp","handleSignUp","history","useHistory","useLocation","pathname","from","state","useEffect","googleSignIn","initializeLoginFramework","loading","toast","handleGoogleSignIn","then","res","dismiss","handleResponse","catch","err","error","message","onSubmit","data","name","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","setJWTToken","replace","success","swal","title","content","icon","buttons","dangerMode","ok","handleSignOut","Modal","show","onHide","size","centered","Header","closeButton","Body","className","defaultValue","required","type","onClick","setShow","Toast","onClose","delay","autohide","src","infoEmojis","alt"],"mappings":"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","file":"static/js/10.54d04cda.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/info-emoji.91ce4204.svg\";","import swal from \"@sweetalert/with-react\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport toast from \"react-hot-toast\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { UserContext } from \"../../App\";\nimport {\n  createUserWithEmailAndPassword,\n  handleGoogleSignIn,\n  handleSignOut,\n  initializeLoginFramework,\n  setJWTToken,\n  signInWithEmailAndPassword,\n} from \"./LoginManager\";\nimport \"./LoginModal.css\";\n\nconst Login = () => {\n  const { setLoggedInUser } = useContext(UserContext);\n  const [showModal, setShowModal] = useState(false);\n  const [newUser, setNewUser] = useState(false);\n\n  const { register: registerSignIn, handleSubmit: handleSignIn } = useForm();\n  const { register: registerSignUp, handleSubmit: handleSignUp } = useForm();\n\n  const history = useHistory();\n  const { pathname, ...location } = useLocation();\n  const { from } = location.state || { from: { pathname: \"/\" } };\n\n  useEffect(() => pathname === \"/login\" && setShowModal(true), [pathname]);\n\n  const googleSignIn = () => {\n    initializeLoginFramework();\n    const loading = toast.loading(\"Please wait...\");\n    handleGoogleSignIn()\n      .then((res) => {\n        toast.dismiss(loading);\n        handleResponse(res);\n      })\n      .catch((err) => {\n        toast.dismiss(loading);\n        toast.error(err.message);\n      });\n  };\n\n  const onSubmit = (data) => {\n    initializeLoginFramework();\n    const loading = toast.loading(\"Please wait...\");\n    const { name, email, password } = data;\n\n    if (newUser && name && email && password) {\n      createUserWithEmailAndPassword(name, email, password)\n        .then((res) => {\n          res.name = name;\n          toast.dismiss(loading);\n          handleResponse(res);\n        })\n        .catch((err) => {\n          toast.dismiss(loading);\n          toast.error(err.message);\n        });\n    }\n\n    if (!newUser && email && password) {\n      signInWithEmailAndPassword(email, password)\n        .then((res) => {\n          toast.dismiss(loading);\n          handleResponse(res);\n        })\n        .catch((err) => {\n          toast.dismiss(loading);\n          toast.error(err.message);\n        });\n    }\n  };\n\n  const handleResponse = (res) => {\n    setLoggedInUser(res);\n    setJWTToken();\n    setShowModal(false);\n    history.replace(from);\n    toast.success(\"Successfully Logged In!\");\n    if (res.email === \"admin@admin.com\") {\n      swal({\n        title: \"Warning!\",\n        content: (\n          <p>\n            You have entered the admin panel for testing.\n            <br />\n            <b>Please do not abuse this facility!</b>\n          </p>\n        ),\n        icon: \"warning\",\n        buttons: true,\n        dangerMode: true,\n      }).then((ok) => {\n        if (!ok) {\n          handleSignOut().then((res) => {\n            setLoggedInUser(res);\n            toast.error(\"Logged Out!\");\n          });\n        }\n      });\n    }\n  };\n\n  return (\n    <Modal\n      show={showModal}\n      onHide={() => {\n        setShowModal(false);\n        history.replace({ pathname: \"/\" });\n      }}\n      size=\"lg\"\n      centered\n    >\n      <Modal.Header closeButton />\n      <Modal.Body>\n        <div className={newUser ? \"cont s--signup\" : \"cont\"}>\n          <div className=\"form sign-in\">\n            <h2>Sign in</h2>\n            <form onSubmit={handleSignIn(onSubmit)}>\n              <label>\n                <span>Email</span>\n                <input\n                  defaultValue=\"admin@admin.com\"\n                  {...registerSignIn(\"email\", { required: true })}\n                  type=\"email\"\n                />\n              </label>\n              <label>\n                <span>Password</span>\n                <input\n                  defaultValue=\"123456\"\n                  {...registerSignIn(\"password\", { required: true })}\n                  type=\"password\"\n                />\n              </label>\n              <p className=\"forgot-pass\">Forgot password?</p>\n              <button type=\"submit\" className=\"submit\">\n                Sign In\n              </button>\n              <button type=\"button\" onClick={googleSignIn} className=\"fb-btn\">\n                Connect with <span>Google</span>\n              </button>\n            </form>\n          </div>\n          <div className=\"sub-cont\">\n            <div className=\"img\">\n              <div className=\"img__text m--up\">\n                <h2>New here?</h2>\n                <p>Sign up and discover great amount of new opportunities!</p>\n              </div>\n              <div className=\"img__text m--in\">\n                <h2>One of us?</h2>\n                <p>\n                  If you already has an account, just sign in. We've missed you!\n                </p>\n              </div>\n              <div onClick={() => setNewUser(!newUser)} className=\"img__btn\">\n                <span className=\"m--up\">Sign Up</span>\n                <span className=\"m--in\">Sign In</span>\n              </div>\n            </div>\n            <div className=\"form sign-up\">\n              <h2>Create Account</h2>\n              <form onSubmit={handleSignUp(onSubmit)}>\n                <label>\n                  <span>Name</span>\n                  <input\n                    {...registerSignUp(\"name\", { required: true })}\n                    type=\"text\"\n                  />\n                </label>\n                <label>\n                  <span>Email</span>\n                  <input\n                    {...registerSignUp(\"email\", { required: true })}\n                    type=\"email\"\n                  />\n                </label>\n                <label>\n                  <span>Password</span>\n                  <input\n                    {...registerSignUp(\"password\", { required: true })}\n                    type=\"password\"\n                  />\n                </label>\n                <button type=\"submit\" className=\"submit\">\n                  Sign Up\n                </button>\n                <button type=\"button\" onClick={googleSignIn} className=\"fb-btn\">\n                  Join with <span>Google</span>\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Toast } from 'react-bootstrap';\nimport LoginModal from '../components/Login/LoginModal';\nimport infoEmojis from '../images/info-emoji.svg';\n\nconst Login = () => {\n    const [show, setShow] = useState(true);\n    return (\n        <section>\n            <Toast className=\"toast-left\" onClose={() => setShow(false)} show={show} delay={10000} autohide>\n                <Toast.Header>\n                    <img src={infoEmojis} className=\"rounded mr-2\" alt=\"Info\" />\n                    <strong className=\"mr-auto\">Important Info</strong>\n                </Toast.Header>\n                <Toast.Body className=\"text-center\">\n                    Use this account to <br /> Sign in as an admin to test the admin panel <br /> Or login with a different account as a user.\n                </Toast.Body>\n            </Toast>\n            <LoginModal />\n        </section>\n    );\n};\n\nexport default Login;"],"sourceRoot":""}